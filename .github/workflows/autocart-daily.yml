name: autocart-runner

# 手動トリガ／スケジュール（必要ならスケジュールを追加）
on:
  workflow_dispatch:
    inputs:
      uid:
        description: 'user id to process (empty = all)'
        required: false
        default: ''
      dry:
        description: 'dry run? true/false'
        required: false
        default: 'false'
      limit:
        description: 'limit per run'
        required: false
        default: '50'
      days:
        description: 'default days threshold'
        required: false
        default: '30'
  # uncomment if you want schedule
  # schedule:
  #   - cron: '0 0 * * *'

permissions:
  contents: read

jobs:
  run-autocart:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # relative path where we will write the key
      FIREBASE_KEY_PATH: .firebase/firebase-key.json
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Try npm ci, fallback to npm install if lock mismatch
        run: |
          set -euo pipefail
          # attempt clean install first (fast / deterministic)
          if npm ci --only=production; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, running npm install as fallback"
            npm install --no-audit --no-fund
          fi

      - name: Write FIREBASE_SERVICE_ACCOUNT to file (required for prod)
        shell: bash
        run: |
          set -euo pipefail
          # Fail early if secret is missing — production requires this.
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "ERROR: secrets.FIREBASE_SERVICE_ACCOUNT is not set. Aborting."
            exit 1
          fi
          mkdir -p "$(dirname "${FIREBASE_KEY_PATH}")"
          printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > "${FIREBASE_KEY_PATH}"
          chmod 600 "${FIREBASE_KEY_PATH}"
          echo "Wrote ${FIREBASE_KEY_PATH}"
          # export for subsequent steps
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/${FIREBASE_KEY_PATH}" >> $GITHUB_ENV

      - name: Confirm environment & debug info
        run: |
          set -euo pipefail
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "tsx available via npx: $(npx --yes --no-install --silent tsx --version 2>/dev/null || echo 'npx will install tsx')"

      - name: Run autocart-runner (TypeScript directly via tsx)
        shell: bash
        run: |
          set -euo pipefail
          # build argument list from inputs
          UID_INPUT="${{ github.event.inputs.uid || '' }}"
          DRY_INPUT="${{ github.event.inputs.dry || 'true' }}"
          LIMIT_INPUT="${{ github.event.inputs.limit || '50' }}"
          DAYS_INPUT="${{ github.event.inputs.days || '30' }}"

          ARGS=()
          # pass cred explicitly (absolute path)
          ARGS+=(--cred "$GOOGLE_APPLICATION_CREDENTIALS")
          # pass flags
          if [ -n "$UID_INPUT" ]; then
            ARGS+=(--uid "$UID_INPUT")
          fi
          # dry flag is boolean: only add if "true"
          if [ "${DRY_INPUT,,}" = "true" ]; then
            ARGS+=(--dry)
          fi
          ARGS+=(--limit "$LIMIT_INPUT")
          ARGS+=(--days "$DAYS_INPUT")
          ARGS+=(--debug)
          ARGS+=(--explain)

          echo "Running: npx tsx src/jobs/checkout/autocart-runner.ts ${ARGS[*]}"
          # Run with npx so tsx is available. npx will fetch tsx if not installed.
          npx --yes tsx src/jobs/checkout/autocart-runner.ts "${ARGS[@]}"

    # end job