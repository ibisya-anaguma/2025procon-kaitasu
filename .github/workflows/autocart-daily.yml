name: autocart-prod

# 手動トリガ／定期実行を両方サポート
on:
  workflow_dispatch:
    inputs:
      uid:
        description: 'user id (omit to process all users)'
        required: false
        default: ''
      limit:
        description: 'limit users/items (number)'
        required: false
        default: '50'
      dry:
        description: 'dry run? true/false'
        required: false
        default: 'false'
      debug:
        description: 'enable debug logs? true/false'
        required: false
        default: 'false'
      explain:
        description: 'enable explain mode? true/false'
        required: false
        default: 'false'
  schedule:
    # 毎日 01:00 JST = UTC 16:00 (例). 必要なら調整してください
    - cron: '0 16 * * *'

concurrency:
  group: autocart-prod-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  run-autocart:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      # safe defaults; 変更可
      TS_ENTRY: src/jobs/checkout/autocart-runner.ts

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Write FIREBASE_SERVICE_ACCOUNT secret to file
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "FIREBASE_SERVICE_ACCOUNT secret is not set. Aborting."
            exit 1
          fi
          mkdir -p .firebase
          printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > .firebase/firebase-key.json
          chmod 600 .firebase/firebase-key.json
          echo "Wrote .firebase/firebase-key.json"

      - name: Export GOOGLE_APPLICATION_CREDENTIALS env
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=.firebase/firebase-key.json" >> $GITHUB_ENV

      - name: Export GOOGLE_CLOUD_PROJECT (from SA JSON)
        shell: bash
        run: |
          set -euo pipefail
          # read project_id from the JSON we just wrote using node (available in runner)
          PROJECT_ID=$(node -e "console.log(require('./.firebase/firebase-key.json').project_id || '')")
          if [ -z "$PROJECT_ID" ]; then
            echo "Warning: project_id not found in SA JSON; continuing without GOOGLE_CLOUD_PROJECT."
          else
            echo "GOOGLE_CLOUD_PROJECT=$PROJECT_ID" >> $GITHUB_ENV
            echo "Set GOOGLE_CLOUD_PROJECT=$PROJECT_ID"
          fi

      - name: Install Node deps (ci -> install fallback)
        shell: bash
        run: |
          set -euo pipefail
          echo "Trying npm ci..."
          if npm ci --no-audit --no-fund; then
            echo "npm ci succeeded."
          else
            echo "npm ci failed; falling back to npm install"
            npm install --no-audit --no-fund
          fi

      - name: Ensure ts runner (tsx) available
        shell: bash
        run: |
          set -euo pipefail
          # Prefer local dependency (node_modules/.bin/tsx). If not present, install globally.
          if [ -x ./node_modules/.bin/tsx ]; then
            echo "Using local tsx"
            echo "TSX_CMD=./node_modules/.bin/tsx" >> $GITHUB_ENV
          else
            echo "Installing tsx globally"
            npm install -g tsx
            echo "TSX_CMD=$(which tsx)" >> $GITHUB_ENV
          fi

      - name: Run autocart-runner (production)
        shell: bash
        env:
          TS_ENTRY: ${{ env.TS_ENTRY }}
        run: |
          set -euo pipefail
          UID_INPUT="${{ github.event.inputs.uid || '' }}"
          LIMIT_INPUT="${{ github.event.inputs.limit || '50' }}"
          DRY_INPUT="${{ github.event.inputs.dry || 'false' }}"
          DEBUG_INPUT="${{ github.event.inputs.debug || 'false' }}"
          EXPLAIN_INPUT="${{ github.event.inputs.explain || 'false' }}"

          ARGS=(--cred .firebase/firebase-key.json)
          # uid optional
          if [ -n "$UID_INPUT" ]; then
            ARGS+=(--uid "$UID_INPUT")
          fi
          # limit
          ARGS+=(--limit "$LIMIT_INPUT")

          # debug/explain flags
          if [ "$DEBUG_INPUT" = "true" ]; then ARGS+=(--debug); fi
          if [ "$EXPLAIN_INPUT" = "true" ]; then ARGS+=(--explain); fi

          # dry flag controls write vs no-write
          if [ "$DRY_INPUT" = "true" ]; then
            ARGS+=(--dry)
            echo "NOTE: Running in DRY mode (no writes)."
          else
            echo "Running in LIVE mode (will write to Firestore)."
          fi

          echo "Executing: $TSX_CMD $TS_ENTRY ${ARGS[*]}"
          # run; exit non-zero -> workflow fails
          $TSX_CMD "$TS_ENTRY" "${ARGS[@]}"

      - name: Upload logs/artifacts (optional)
        if: failure() || success()
        uses: actions/upload-artifact@v4
        with:
          name: autocart-run-logs
          path: |
            src/jobs/checkout/logs/*.log
            .firebase/firebase-key.json