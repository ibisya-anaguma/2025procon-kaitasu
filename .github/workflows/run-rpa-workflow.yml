name: run-autocart
on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  run-autocart:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      AUTOCART_LIMIT: 50

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and python
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure python3 & jq available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq python3 python3-pip || true

      - name: Prepare Firebase service account file (from secret)
        if: ${{ secrets.FIREBASE_SERVICE_ACCOUNT != '' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .firebase
          TARGET=".firebase/firebase-key.json"

          # Put secret value into an environment variable for the inline python to read
          export SA="${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"

          python3 - <<'PY'
import os, json, sys
s = os.environ.get("SA", "")
if not s:
    print("ERROR: env SA empty", file=sys.stderr); sys.exit(2)
# try direct load
try:
    json.loads(s)
    out = s
except Exception:
    # try unescape literal \n sequences
    if "\\n" in s:
        try:
            out = s.replace("\\n", "\n")
            json.loads(out)
            print("NOTE: secret contained literal \\n sequences; unescaped successfully")
        except Exception as e2:
            print("ERROR: secret invalid after unescaping:", e2, file=sys.stderr); sys.exit(3)
    else:
        print("ERROR: secret not valid JSON", file=sys.stderr); sys.exit(4)
# write file
with open(".firebase/firebase-key.json", "w", encoding="utf-8") as f:
    f.write(out)
print("WROTE_OK")
PY

          if [ ! -s "$TARGET" ]; then
            echo "::error::Wrote firebase key but it's empty or missing ($TARGET)"; exit 1
          fi
          echo "Wrote and validated $TARGET (size=$(wc -c < "$TARGET") bytes)"
          chmod 600 "$TARGET" || true

      - name: Show runtime info
        shell: bash
        run: |
          set -euo pipefail
          echo "workspace: $GITHUB_WORKSPACE"
          echo "autocart limit: ${AUTOCART_LIMIT}"

      - name: Run autocart-runner (LIVE: writes to Firestore unless runner uses --dry)
        id: run_autocart
        shell: bash
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/.firebase/firebase-key.json
        run: |
          set -euo pipefail
          cd "${{ github.workspace }}"

          echo "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}"
          echo "Running autocart-runner ..."

          # make sure tsx exists
          npx -y tsx --version || true

          npx tsx src/jobs/checkout/autocart-runner.ts \
            --cred "${GOOGLE_APPLICATION_CREDENTIALS}" \
            --limit "${AUTOCART_LIMIT}" \
            --debug \
            --explain

      - name: Upload logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autocart-logs
          path: |
            src/jobs/checkout/logs/*.log
            src/jobs/checkout/*.log

      - name: Cleanup firebase key (always)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          TARGET=".firebase/firebase-key.json"
          if command -v shred >/dev/null 2>&1; then
            shred -u "$TARGET" || rm -f "$TARGET" || true
          else
            rm -f "$TARGET" || true
          fi
          echo "Cleaned firebase key"