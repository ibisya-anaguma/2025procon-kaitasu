name: run-autocart

on:
  workflow_dispatch: {}

jobs:
  run-autocart:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Prepare Firebase service account file (from secret)
        shell: bash
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          set -euo pipefail
          mkdir -p .firebase

          # This Python block robustly accepts:
          #  - raw JSON pasted into the secret
          #  - JSON pasted where newline characters are literal "\n"
          #  - one-line base64(JSON)
          python3 - <<'PY'
          import os, sys, json, base64, re

          s = os.environ.get("FIREBASE_SERVICE_ACCOUNT", "")
          if not s:
              print("ERROR: FIREBASE_SERVICE_ACCOUNT secret is empty", file=sys.stderr)
              sys.exit(2)
          s = s.strip()

          def is_json(x):
              try:
                  json.loads(x)
                  return True
              except Exception:
                  return False

          out = None

          # 1) raw JSON?
          if is_json(s):
              out = s
          else:
              # 2) unescape literal "\n" sequences (common paste issue)
              try_unescape = s.replace("\\n", "\n")
              if is_json(try_unescape):
                  out = try_unescape
              else:
                  # 3) try base64 decode (strip whitespace/newlines first)
                  b64 = re.sub(r"\s+", "", s)
                  try:
                      dec = base64.b64decode(b64)
                      text = dec.decode("utf-8")
                      if is_json(text):
                          out = text
                      else:
                          text2 = text.replace("\\n", "\n")
                          if is_json(text2):
                              out = text2
                  except Exception:
                      out = None

          if not out:
              print("ERROR: FIREBASE_SERVICE_ACCOUNT secret is not valid JSON (tried raw/unescape/base64)", file=sys.stderr)
              sys.exit(3)

          with open(".firebase/firebase-key.json", "w", encoding="utf-8") as f:
              f.write(out)

          print("WROTE_OK")
          PY

          TARGET=".firebase/firebase-key.json"
          if [ ! -s "$TARGET" ]; then
            echo "::error::Wrote firebase key but it's empty or missing ($TARGET)" >&2
            exit 4
          fi
          chmod 600 "$TARGET" || true
          echo "Wrote and validated $TARGET (size=$(wc -c < \"$TARGET\") bytes)"

      - name: Show runtime info (non-secret)
        shell: bash
        run: |
          set -euo pipefail
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "AUTOCART_LIMIT=${{ env.AUTOCART_LIMIT || '50' }}"

      - name: Run autocart-runner (LIVE:will write to Firestore unless --dry)
        id: run_autocart
        shell: bash
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/.firebase/firebase-key.json
          AUTOCART_LIMIT: '50'
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE}"

          echo "Using GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}"
          echo "Running autocart-runner (LIVE unless you pass --dry)."

          npx tsx src/jobs/checkout/autocart-runner.ts \
            --cred "${GOOGLE_APPLICATION_CREDENTIALS}" \
            --limit "${AUTOCART_LIMIT}" \
            --debug \
            --explain

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autocart-logs
          path: |
            src/jobs/checkout/logs/*.log
            src/jobs/checkout/*.log

      - name: Cleanup firebase key (always)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if command -v shred >/dev/null 2>&1; then
            shred -u .firebase/firebase-key.json || true
          else
            rm -f .firebase/firebase-key.json || true
          fi
          echo "cleaned firebase key"