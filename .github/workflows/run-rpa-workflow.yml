name: run-autocart

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  run-autocart:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      AUTOCART_LIMIT: '50'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node (for tsx)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install tsx (runtime)
        run: |
          set -euo pipefail
          npm i -g tsx@4

      # -------------------------------
      # Prepare Firebase service account (decode base64 secret -> json)
      # Expect secret: FIREBASE_SERVICE_ACCOUNT_B64 (base64 of JSON, single line)
      # -------------------------------
      - name: Prepare Firebase service account file (from secret)
        if: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_B64 != '' }}
        run: |
          set -euo pipefail
          mkdir -p .firebase

          # write the base64 blob into a file (no newline issues)
          printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT_B64 }}" > .firebase/firebase-key.b64

          # decode to JSON file
          base64 --decode .firebase/firebase-key.b64 > .firebase/firebase-key.json

          # quick validation using python (will exit non-zero if invalid)
          python3 - <<'PY'
          import json, sys, pathlib
          p = pathlib.Path('.firebase/firebase-key.json')
          try:
              data = json.loads(p.read_text(encoding='utf-8'))
          except Exception as e:
              print("ERROR: FIREBASE_SERVICE_ACCOUNT secret is not valid JSON (decoded).", file=sys.stderr)
              print(str(e), file=sys.stderr)
              sys.exit(3)
          # minimal sanity check
          if not isinstance(data.get("type"), str) or data.get("type") != "service_account":
              print("ERROR: decoded JSON missing expected 'type':'service_account'", file=sys.stderr)
              sys.exit(4)
          print("WROTE_OK")
          PY
          # secure permissions
          chmod 600 .firebase/firebase-key.json || true
          rm -f .firebase/firebase-key.b64 || true

      - name: Show runtime info (non-secret)
        run: |
          set -euo pipefail
          echo "workspace: $GITHUB_WORKSPACE"
          echo "autocart limit: ${AUTOCART_LIMIT}"

      - name: Run autocart-runner
        id: run_autocart
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/.firebase/firebase-key.json
          AUTOCART_LIMIT: ${{ env.AUTOCART_LIMIT }}
        run: |
          set -euo pipefail
          echo "Using GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
          cd "${{ github.workspace }}"
          # run the TS runner
          npx tsx src/jobs/checkout/autocart-runner.ts \
            --cred "$GOOGLE_APPLICATION_CREDENTIALS" \
            --limit "$AUTOCART_LIMIT" \
            --debug \
            --explain

      - name: Upload logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autocart-logs
          path: |
            src/jobs/checkout/logs/*.log
            src/jobs/checkout/*.log

      - name: Cleanup firebase key (always)
        if: always()
        run: |
          set -euo pipefail
          rm -f .firebase/firebase-key.json || true
          echo "cleaned firebase key"