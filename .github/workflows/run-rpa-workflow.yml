name: run-autocart

on:
  workflow_dispatch: {}
  #schedule:
  #  - cron: '0 16 * * *'

permissions:
  contents: read

jobs:
  run-autocart:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      AUTOCART_LIMIT: 50

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure jq is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq || true

      - name: Prepare Firebase service account file (from secret)
        if: ${{ secrets.FIREBASE_SERVICE_ACCOUNT != '' }}
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p .firebase
          TARGET=".firebase/firebase-key.json"

          # Write secret *as-is* (preserve newlines)
          printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > "$TARGET"
          chmod 600 "$TARGET" || true

          # quick sanity: file exists and non-empty
          if [ ! -s "$TARGET" ]; then
            echo "::error::Wrote firebase key but file is empty or missing ($TARGET)"; exit 1
          fi

          # Validate JSON: prefer jq, fallback to Python
          if command -v jq >/dev/null 2>&1; then
            if ! jq -e . "$TARGET" >/dev/null 2>&1; then
              echo "::error::Firebase key JSON validation failed (jq)"; exit 1
            fi
          else
            python3 - <<'PY'
import json,sys
p = ".firebase/firebase-key.json"
s = open(p, "r", encoding="utf-8").read()
try:
  json.loads(s)
except Exception as e:
  # try unescape \n sequences (handles bad paste where \n are literal characters)
  if "\\n" in s:
    try:
      json.loads(s.replace("\\n", "\n"))
      print("Warning: json parsed after unescaping literal \\n sequences")
    except Exception as e2:
      print("ERROR: firebase key JSON invalid", e2, file=sys.stderr); sys.exit(2)
  else:
    print("ERROR: firebase key JSON invalid", e, file=sys.stderr); sys.exit(2)
PY
          fi

          # safe non-secret debug: file size only
          echo "Wrote and validated $TARGET (size=$(wc -c < "$TARGET") bytes)"

      - name: Show runtime info (non-secret)
        shell: bash
        run: |
          set -euo pipefail
          echo "workspace: $GITHUB_WORKSPACE"
          echo "autocart limit: ${AUTOCART_LIMIT}"

      - name: Run autocart-runner (LIVE: writes to Firestore unless --dry passed)
        id: run_autocart
        shell: bash
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/.firebase/firebase-key.json
        run: |
          set -euo pipefail
          cd "${{ github.workspace }}"

          echo "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}"
          echo "Invoking autocart-runner (will write to Firestore unless runner internally uses dry)."

          # ensure tsx is available via npx (node is installed above)
          npx -y tsx --version || true

          npx tsx src/jobs/checkout/autocart-runner.ts \
            --cred "${GOOGLE_APPLICATION_CREDENTIALS}" \
            --limit "${AUTOCART_LIMIT}" \
            --debug \
            --explain

      - name: Upload logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autocart-logs
          path: |
            src/jobs/checkout/logs/*.log
            src/jobs/checkout/*.log

      - name: Cleanup firebase key (always)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          TARGET=".firebase/firebase-key.json"
          if command -v shred >/dev/null 2>&1; then
            shred -u "$TARGET" || rm -f "$TARGET" || true
          else
            rm -f "$TARGET" || true
          fi
          echo "Cleaned firebase key"